import os

from string import Template
proxy_template = Template(
"""#This script was auto generated by "rnmd" a runtime to execute code contained inside markdown documents

# ---------- Installer
$installer_code

# ---------- Proxy to Runtime and target document
$runner$runtime_path $markdown_doc_path
"""
)

installer_file_path = os.path.join(os.path.dirname(__file__),"include-install-rnmd.sh")

with open(installer_file_path, "r") as installer_file:
    installer_code = installer_file.read()



debugging = False
current_script_dir = os.path.dirname(__file__)

def make_proxy(source_path, target_path, relative=False, localInstall=False):

    runner = ""
    runtime_path = "rnmd"

    if(localInstall):
        runner = "python3 "
        runtime_path = os.path.abspath(os.path.join(current_script_dir,"rnmd.py"))

    markdown_doc_path = os.path.abspath(source_path)

    if(relative):
        #Relative path from proxy file to markdown doc
        doc_path = os.path.relpath(markdown_doc_path, os.path.dirname(target_path));
        #Has to be added in bash so that the path is resolved from the proxies location (and not the caller directory)
        doc_path = os.path.join("`dirname $0`", doc_path)

    substitution_dict = { 'installer_code': installer_code, 'runner': runner, 'runtime_path': runtime_path, 'markdown_doc_path': markdown_doc_path }
    proxy_string = proxy_template.substitute(**substitution_dict)

    with open(target_path, "w+") as out_file:
        out_file.write(proxy_string)

    print("Created proxy at: " + target_path)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="Compile markdown bash documentation to executable program scripts"
    )

    parser.add_argument('source', help="Path of the documentation file")
    parser.add_argument('target', help="Output path for the resulting executable file")

    # Parse the arguments
    arguments = parser.parse_args()

    source = arguments.source
    target = arguments.target

    make_proxy(source,target)